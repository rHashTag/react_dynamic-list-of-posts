{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/comments.ts","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["PostsList","selectedPostId","setSelectedPostId","posts","className","map","post","userId","id","type","onClick","BASE_URL","getUsers","a","fetch","response","json","getPostComments","postId","deleteComment","commentId","method","postComment","newComment","headers","body","JSON","stringify","getUserPosts","getPostDetails","NewCommentForm","loadPostComments","useState","newName","setNewName","newEmail","setNewEmail","newBody","setNewBody","submitHandler","event","preventDefault","name","email","onSubmit","placeholder","value","onChange","target","required","PostDetails","postDetails","setPostDetails","postComments","setPostComments","showComments","setShowComments","loadPostDetails","postDetailsFromServer","useEffect","commentsFromServer","deleteHandler","title","length","comment","App","users","setUsers","currentUserId","setCurrentUserId","setPosts","getUsersFromServer","usersFromServer","getPostsFromServer","postsFromServer","user","index","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.621e0f02.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\n\ntype Props = {\n  selectedPostId: number | null;\n  setSelectedPostId: (id: number) => void;\n  posts: Post[] | null;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  selectedPostId,\n  setSelectedPostId,\n  posts,\n}) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts?.map(post => (\n          <li\n            key={post.id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              sunt aut facere repellat provident occaecati excepturi optio\n            </div>\n            {selectedPostId === post.id\n              ? (\n                <button\n                  type=\"button\"\n                  className=\"\n                    PostsList__button\n                    button\"\n                  onClick={() => setSelectedPostId(0)}\n                >\n                  Close\n                </button>\n              )\n              : (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => setSelectedPostId(post.id)}\n                >\n                  Open\n                </button>\n              )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getUsers = async () => {\n  const response = await fetch(`${BASE_URL}/users/`);\n\n  return response.json();\n};\n","import { BASE_URL } from './api';\n\nexport const getPostComments = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  return response.json();\n};\n\nexport const deleteComment = async (commentId: number) => {\n  const response = await fetch(`${BASE_URL}/comments/${commentId}`,\n    { method: 'DELETE' });\n\n  return response.json();\n};\n\nexport const postComment = async (newComment: NewComment) => {\n  const response = await fetch(`${BASE_URL}/comments`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json; charset=UTF-8',\n      },\n      body: JSON.stringify(newComment),\n    });\n\n  return response.json();\n};\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = async (userId: number) => {\n  let response;\n\n  if (userId === 0) {\n    response = await fetch(`${BASE_URL}/posts/`);\n  } else {\n    response = await fetch(`${BASE_URL}/posts?userId=${userId}`);\n  }\n\n  return response.json();\n};\n\nexport const getPostDetails = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return response.json();\n};\n","import React, { FormEvent, useState } from 'react';\nimport { postComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  selectedPostId: number;\n  loadPostComments: () => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPostId,\n  loadPostComments,\n}) => {\n  const [newName, setNewName] = useState('');\n  const [newEmail, setNewEmail] = useState('');\n  const [newBody, setNewBody] = useState('');\n\n  const submitHandler = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    await postComment(\n      {\n        postId: selectedPostId,\n        name: newName,\n        email: newEmail,\n        body: newBody,\n      },\n    );\n\n    loadPostComments();\n    setNewName('');\n    setNewEmail('');\n    setNewBody('');\n  };\n\n  return (\n    <form\n      onSubmit={submitHandler}\n      className=\"NewCommentForm\"\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={newName}\n          onChange={(event) => setNewName(event.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={newEmail}\n          onChange={(event) => setNewEmail(event.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={newName}\n          onChange={(event) => setNewName(event.target.value)}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { deleteComment, getPostComments } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPostId: number;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPostId,\n}) => {\n  const [postDetails, setPostDetails] = useState<Post | null>(null);\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [showComments, setShowComments] = useState(true);\n\n  const loadPostDetails = async () => {\n    try {\n      let postDetailsFromServer;\n\n      if (selectedPostId) {\n        postDetailsFromServer = await getPostDetails(selectedPostId);\n      }\n\n      setPostDetails(postDetailsFromServer);\n    } catch {\n      setPostDetails(null);\n    }\n  };\n\n  useEffect(\n    () => {\n      loadPostDetails();\n    },\n    [selectedPostId],\n  );\n\n  const loadPostComments = async () => {\n    try {\n      const commentsFromServer = await getPostComments(selectedPostId);\n\n      setPostComments(commentsFromServer);\n    } catch {\n      setPostComments([]);\n    }\n  };\n\n  const deleteHandler = async (commentId: number) => {\n    await deleteComment(commentId);\n    loadPostComments();\n  };\n\n  useEffect(\n    () => {\n      loadPostComments();\n    },\n    [selectedPostId],\n  );\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {postDetails && (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>{postDetails.title}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => setShowComments(!showComments)}\n            >\n              {showComments\n                ? `Hide ${postComments.length} comments`\n                : `Show ${postComments.length} comments`}\n            </button>\n\n            {showComments && (\n              <ul className=\"PostDetails__list\">\n                {postComments.map((comment: Comment) => (\n                  <li\n                    key={comment.id}\n                    className=\"PostDetails__list-item\"\n                  >\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => deleteHandler(comment.id)}\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                selectedPostId={selectedPostId}\n                loadPostComments={loadPostComments}\n              />\n            </div>\n          </section>\n        </>\n      )}\n\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/api';\nimport { getUserPosts } from './api/posts';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState<User[] | null>([]);\n  const [currentUserId, setCurrentUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState<number>(0);\n  const [posts, setPosts] = useState<Post[] | null>([]);\n\n  const getUsersFromServer = async () => {\n    try {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    } catch {\n      setUsers([]);\n    }\n  };\n\n  useEffect(\n    () => {\n      getUsersFromServer();\n    },\n    [],\n  );\n\n  const getPostsFromServer = async () => {\n    try {\n      const postsFromServer = await getUserPosts(currentUserId);\n\n      setPosts(postsFromServer);\n    } catch {\n      setPosts([]);\n    }\n  };\n\n  useEffect(\n    () => {\n      getPostsFromServer();\n    },\n    [currentUserId],\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={(event) => setCurrentUserId(+event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            {users?.map((user, index) => {\n              // there were 1307 users in the API so I limitted to 10\n              if (index < 10) {\n                return (\n                  <option\n                    key={user.id}\n                    value={user.id}\n                  >\n                    {user.name}\n                  </option>\n                );\n              }\n\n              return null;\n            })}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedPostId={selectedPostId}\n            setSelectedPostId={setSelectedPostId}\n            posts={posts}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails\n            selectedPostId={selectedPostId}\n          />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}